"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViolationCheck = void 0;
const path = require("path");
class ViolationCheck {
    constructor(ruleCheck, templatePath, rulePath) {
        this.ruleCheck = ruleCheck;
        this.templatePath = templatePath;
        this.rulePath = rulePath;
        this.violatingResources = new Map();
        this.violation = {};
    }
    /**
     * A single guard rule can contain multiple "checks" that are run against a resource
     * or against multiple resources. So for example you might get something like:
     * {
     *   name: 's3-public-buckets-prohibited',
     *   messages: {
     *     custom_message: 'Buckets should not be public',
     *   },
     *   checks: [
     *     {
     *       traversed: {
     *         to: {
     *           path: '/Resources/MyCustomL3ConstructBucket8C61BCA7/Properties/PublicAccessBlockConfiguration/BlockPublicPolicy'
     *         }
     *       }
     *     },
     *     {
     *       traversed: {
     *         to: {
     *           path: '/Resources/MyCustomL3ConstructBucket8C61BCA7/Properties/PublicAccessBlockConfiguration/BlockPublicAcls'
     *         }
     *       }
     *     }
     *   ]
     * }
     *
     * We want to display this to the user as a single violation since there is a single
     * custom_message. This method sets up some inheritance and constructs a single violation per
     * resource+message.
     */
    setViolatingResources(check) {
        // pull the description from the custom message or from the error message if available
        this.violation.description = this.violation.description || check.messages?.custom_message || check.messages?.error_message;
        // The fix will only appear in a custom_message because it would be a user
        // generated message
        this.violation.fix = this.violation.fix ?? check.messages?.custom_message ?? 'N/A';
        const location = check.traversed.to.path;
        const resourceName = location.split('/')[2];
        const violatingResource = this.violatingResources.get(this.violation.fix);
        const result = {
            locations: [location],
        };
        if (violatingResource) {
            const resource = violatingResource.resource.get(resourceName);
            if (resource) {
                resource.locations.push(location);
            }
            else {
                violatingResource.resource.set(resourceName, result);
            }
        }
        else {
            this.violatingResources.set(this.violation.fix, {
                resource: new Map([[resourceName, result]]),
                violation: {
                    description: this.violation.description ?? '',
                    fix: this.violation.fix,
                },
            });
        }
    }
    /**
     * Process a Guard result check and return a plugin violation
     * We are establishing a bit of a convention with the messages where we expect
     * the custom_message field to contain a string formatted like this
     * (based on the Control Tower rules)
     *
     *     [FIX]: Do something...
     *     [XXX]: description of the rule
     *
     * If it does contain a structure like that then we try and parse out the
     * fix and description fields, otherwise we just take the custom_message as
     * is and use it for both.
     */
    processCheck() {
        this.ruleCheck.checks.forEach(check => {
            if (check.messages?.custom_message) {
                const message = check.messages.custom_message.split('\n').filter(m => m.trim() !== '');
                message.forEach(m => {
                    const mes = m.trim();
                    if (mes.startsWith('[FIX]')) {
                        this.violation.fix = mes;
                    }
                    else {
                        this.violation.description = mes;
                    }
                });
            }
            this.setViolatingResources(check);
        });
        return Array.from(this.violatingResources.values()).map(violation => {
            return {
                description: violation.violation.description,
                fix: violation.violation.fix,
                ruleMetadata: {
                    DocumentationUrl: this.generateRuleDocUrl(),
                },
                ruleName: this.ruleCheck.name,
                violatingResources: Array.from(violation.resource.entries()).map(([key, value]) => {
                    return {
                        locations: value.locations,
                        resourceLogicalId: key,
                        templatePath: this.templatePath,
                    };
                }),
            };
        });
    }
    generateRuleDocUrl() {
        const serviceName = path.basename(path.dirname(this.rulePath));
        const ruleName = path.basename(this.rulePath, '.guard');
        const root = 'https://docs.aws.amazon.com/controltower/latest/userguide';
        return `${root}/${serviceName}-rules.html#${ruleName}-description`;
    }
}
exports.ViolationCheck = ViolationCheck;
//# sourceMappingURL=data:application/json;base64,